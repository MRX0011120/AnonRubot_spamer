import asyncio.constants

import socks
print("socks module path:", socks.__file__)


from playwright.async_api import async_playwright
from telethon.sync import TelegramClient
from config.config import proxy, API_ID, API_HASH

async def connect_to_telegram(session_path, api_id = API_ID, api_hash = API_HASH):
    client = TelegramClient(session_path, api_id, api_hash, proxy=(socks.SOCKS5, proxy['host'], proxy['port'], proxy['username'], proxy['password']))
    await client.connect()
    if not await client.is_user_authorized():
        print(f"{session_path} - –ù–ï–í–ê–õ–ò–î")
        return None
    else:
        print(f"{session_path} - –í–ó–Ø–õ –°–ï–°–°–ò–Æ –í –†–ê–ë–û–¢–£")
        return client

async def connect_to_web_telegram(numbers_from_session, code_tg=None, code_queue=None):
    async with async_playwright() as p:
        proxy_socks = {
            "server": f"http://{proxy['host']}:{proxy['port']}",
            "username" : f"{proxy['username']}",
            "password": f"{proxy['password']}"
        }
        browser = await p.firefox.launch(
            headless=True,
            proxy=proxy_socks
        )
        print(proxy_socks)
        context = await browser.new_context()
        page = await context.new_page()

        await page.goto("https://web.telegram.org/a/", wait_until="domcontentloaded", timeout=120_000)

        login = await page.wait_for_selector("text=LOG IN BY PHONE NUMBER", timeout=120_000)
        await login.click()

        # await page.wait_for_selector("div.input-field-input[contenteditable='true'][inputmode='decimal']",
        #                              timeout=60000,
        #                              state='attached')
        number_input = await page.wait_for_selector("input#sign-in-phone-number", timeout=30000)
        # number_input = page.locator("input#sign-in-phone-number")
        # await number_input.wait_for(timeout=60000)
        await number_input.click()
        print('TG - –ù–ê–ñ–ê–õ –ù–ê –ü–û–õ–ï –° –ù–û–ú–ï–†–û–ú')



        await page.keyboard.press('Control+A')
        # print('–≤—ã–¥–µ–ª–∏–ª –≤–µ—Å—å —Ç–µ–∫—Å—Ç')
        await page.keyboard.press('Backspace')
        # print('—É–¥–∞–ª–∏–ª –≤–µ—Å—å —Ç–µ–∫—Å—Ç')

        await number_input.fill(f"+{numbers_from_session}")
        # print("‚úÖ –ü–æ–ª–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")

        await page.keyboard.press('Enter')

        await page.wait_for_selector("input#sign-in-code", timeout=30000)
        code_input = page.locator("input#sign-in-code")
        await code_input.wait_for(timeout=30000)
        await code_input.click()

        if code_tg is None and code_queue is not None:
            try:
                print('TG - –ñ–î–£ –ö–û–î –û–¢ TG')
                code_tg = await asyncio.wait_for(code_queue.get(), timeout=60)
                print(f'TG - –ö–û–î –û–¢ TG –ü–û–õ–£–ß–ï–ù: {code_tg}')
            except asyncio.TimeoutError:
                print('TG - –ö–û–î –û–¢ TG –ó–ê 60 –°–ï–ö–£–ù–î –ù–ï –ë–´–õ –ü–û–õ–£–ß–ï–ù :(')
                return
        elif code_tg is None:
            print('TG - –ö–û–î –û–¢ TG –í–û–û–ë–©–ï –ù–ï –ü–†–ò–®–ï–õ')
            return
        print(code_tg)
        await code_input.fill(code_tg)
        print("‚úÖTG - –ö–û–î –ë–´–õ –£–°–ü–ï–®–ù–û –í–í–ï–î–ï–ù")

        entered_code = await code_input.input_value()

        await page.keyboard.press('Enter')

        # –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —á–∞—Ç —Å –∞–Ω–æ–Ω–±–æ—Ç–æ–º
        await page.wait_for_selector('a.ListItem-button[href="#660309226"]', timeout=30000)
        await page.click('a.ListItem-button[href="#660309226"]')

        # —Ç—É—Ç –≤—Ä–æ–æ–¥–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        await page.wait_for_selector('div.message-date-group')
        messages = await page.query_selector_all('div.message-date-group')

        try:
            button = await page.wait_for_selector('button[aria-label="Go to bottom"]', timeout=2000)
            await button.click()
        except:
            print('–∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∑ –Ω–µ –±—ã–ª–æ')

        if messages:
            last_message = messages[-1]
            # await last_message.wait_for_selector('div.Message.message-list-item.first-in-group.allow-selection.last-in-group.last-in-list.has-inline-buttons.shown.open', timeout=10000)
            message_div = await last_message.query_selector(
                'div.Message.message-list-item.first-in-group.allow-selection.last-in-group.last-in-list.has-inline-buttons.shown.open')

            if message_div:
                await message_div.wait_for_selector('button:has-text("–Ø –Ω–µ –±–æ—Ç")')
                button = await message_div.query_selector('button:has-text("–Ø –Ω–µ –±–æ—Ç")')

                if button:
                    await button.click()
                    await page.wait_for_selector('button.Button.confirm-dialog-button.default.primary.text',
                                                 timeout=10000)
                    await page.click('button.Button.confirm-dialog-button.default.primary.text')
                    print("üü¢ –ö–Ω–æ–ø–∫–∞ '–Ø –Ω–µ –±–æ—Ç' –Ω–∞–∂–∞—Ç–∞")
                else:
                    print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–Ø –Ω–µ –±–æ—Ç' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø —Å–æ–æ–±—â–µ–Ω–∏–π")


        iframe_element = await page.wait_for_selector('iframe.OmY14FFl', timeout=10000)
        iframe_src = await iframe_element.get_attribute('src')

        print(iframe_src)

        # ya_ne_bot = await last_message.query_selector('button.Button.tiny.primary.has-ripple')
        # await ya_ne_bot.click()



        await asyncio.Future()