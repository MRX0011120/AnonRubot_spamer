import asyncio
import re

from telethon.tl.functions.messages import RequestWebViewRequest, RequestAppWebViewRequest, RequestSimpleWebViewRequest, RequestMainWebViewRequest, GetBotCallbackAnswerRequest
from telethon.tl.types import InputPeerUser, InputBotAppShortName, InputUser
from telethon.sync import events, types, functions
from config.config import green, yellow, red, brigth, ress
from config.config import spam_text_AnonRubot_1, age_AnonRubot, spam_text_AnonRubot_2
from modules.telegram import connect_to_web_telegram


count = 0
timeout_seconds = 20
code_queu= asyncio.Queue()
async def start_dialog_AnonRubot(client, flag_AnonRubot):
    replied_in_this_chats = {'status': None}
    pause_timer = asyncio.Event()
    pause_timer.set()
    timeout_state = {'task': None}

    async def timeout_handler():
        await pause_timer.wait()
        await asyncio.sleep(timeout_seconds)
        await pause_timer.wait()
        print(yellow + f"@AnonRubot >>> —Ç–∏—à–∏–Ω–∞ {timeout_seconds} —Å–µ–∫, –∏—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞" + ress)
        await client.send_message('@AnonRubot', '/next')

    def reset_timer():
        if timeout_state['task'] and not timeout_state['task'].done():
            timeout_state['task'].cancel()
        timeout_state['task'] = asyncio.create_task(timeout_handler())

    @client.on(events.NewMessage(chats=777000))
    async def handler(event):
        match = re.search(r'Login code: (\d{5})', event.raw_text)
        if match:
            code_tg = match.group(1)
            await code_queu.put(code_tg)
            print(f'–∫–æ–¥ –æ—Ç —Ç–≥ - {code_tg}')
        else:
            print('–∫–æ–¥–∞ –Ω–µ—Ç')
        # print(f'–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–≥: {event.raw_text}')

    @client.on(events.NewMessage(from_users='@AnonRubot'))
    async def handle_new_message(event):

        text = event.raw_text.strip()
        global count
        reset_timer()

        if '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω' in event.raw_text:
            await client.send_message('@AnonRubot', spam_text_AnonRubot_1)
            count += 1
            replied_in_this_chats['status'] = False
            print(green + brigth + f'@AnonRubot >>> –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≤–µ—Å—Ç–≤–∏–µ (–¢–ï–ö–°–¢) > {count}' + ress)

        elif not any(phrase in text for phrase in [
            '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω',
            '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å',
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç',
            '–ú—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –≤–∞–º',
            '–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏',
            '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫',
            '(–æ—Ç 9 –¥–æ 99)',
            '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤',
            '–ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞',
            '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏ –≤ –ø–æ—Ä—è–¥–∫–µ',
            '–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...',
            '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ ü§î',
            '–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...'
        ]):
            if not replied_in_this_chats['status']:
                await asyncio.sleep(1)
                await client.send_message('@AnonRubot', spam_text_AnonRubot_2)
                replied_in_this_chats['status'] = True
                print(green + brigth + f"@AnonRubot >>> –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∞–º —Ç–µ–∫—Å—Ç > {count}" + ress)
            else:
                print(yellow + brigth + '@AnonRubot >>> —è —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É')

        elif '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å' in event.raw_text:
            await client.send_message('@AnonRubot', '/search')
            print(yellow + brigth + '@AnonRubot >>> —Å–æ –º–Ω–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–≤—è–∑—å, –∏—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ' + ress)

        elif '(–æ—Ç 9 –¥–æ 99)' in event.raw_text:
            await client.send_message('@AnonRubot', age_AnonRubot)
            await client.send_message('@AnonRubot', '/search')
            print(yellow + brigth + f'@AnonRubot >>> —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç {age_AnonRubot}' + ress)

        elif '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫' in event.raw_text:
            print(yellow + brigth + '@AnonRubot >>> —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å, –∏—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ' + ress)
            await client.send_message('@AnonRubot', '/next')

        elif '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏' in event.raw_text:
            print(red + '@AnonRubot >>> –í–´–õ–ï–ó–õ–ê –ö–ê–ü–ß–ê, –û–ñ–ò–î–ê–ô–¢–ï, –°–ö–û–†–û –ü–û–õ–£–ß–ò–¢–ï –°–°–´–õ–ö–£ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø' + ress)
            print(event.raw_text)
            print(event.message.to_dict())

            pause_timer.clear()


            me = await client.get_me()
            number = me.phone

            await connect_to_web_telegram(number, code_queue=code_queu)
            reset_timer()
            pause_timer.set()

            # app_info = await client(
            #     RequestAppWebViewRequest(
            #         "me",
            #         InputBotAppShortName(await client.get_input_entity("AnonRubot"), "anonrubotcaptcha"),
            #         "android",
            #         start_param='',
            #     )
            # )
            # print(app_info)
            # print(app_info.url)

            flag_AnonRubot['AnonRubot'] = False

        elif '–ú—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–º –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞.' in event.raw_text:
            print(red + '@AnonRubot >>> –±–ª–æ–∫ –Ω–∞ —Å—É—Ç–∫–∏')
            flag_AnonRubot['AnonRubot'] = False

        elif '–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤' in event.raw_text:
            print(red + '@AnonRubot >>> –æ—Ç–¥—ã—Ö –Ω–∞ —Å—É—Ç–∫–∏')
            flag_AnonRubot['AnonRubot'] = False

        elif '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏ –≤ –ø–æ—Ä—è–¥–∫–µ' in event.raw_text:
            pause_timer.clear()
            emoji_lsit = []
            i = 0
            for row in (event.message.to_dict())['reply_markup']['rows']:
                for button in row['buttons']:
                    text = button.get('text')
                    if text and not text.startswith('–û–±–Ω–æ–≤–∏—Ç—å'):
                        emoji_lsit.append(text + f'{i+1}')
            print(emoji_lsit)
            if event.media and event.media.photo:
                image = await event.download_media(file="./captcha.jpg")
            buttons = []
            for row in (event.message.reply_markup.rows):
                for button in row.buttons:
                    if '–û–±–Ω–æ–≤–∏—Ç—å' in button.text:
                        continue
                    buttons.append(button)
            selected = input('–í–í–ï–î–ò –ù–û–ú–ï–†–ê –ö–ù–û–ü–û–ö –ß–ï–†–ï–ó –ü–†–û–ë–ï–õ: ').split()
            print(selected)


            for i in selected:
                button = buttons[int(i)-1]
                try:
                    click = await client(GetBotCallbackAnswerRequest(
                        peer=await client.get_input_entity(660309226),
                        msg_id=event.message.id,
                        data=button.data
                    ))
                except Exception as e:
                    print(e)
            reset_timer()
            pause_timer.set()



